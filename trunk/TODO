- Reimplement evaluation stack way of running low level code to more robust
  model
  (added Fri Nov 19 14:02:35 2004, incomplete, priority veryhigh)

- Work out how to find out the dimensions of an image in vtk
  (added Fri Nov 19 14:28:43 2004, incomplete, priority veryhigh)

- Implement render object talking directly to a python interpreter instance
  sitting in a separate thread
  (added Fri Nov 19 14:29:48 2004, incomplete, priority veryhigh)

- Investigate threading in python and how communication works between processes
  (added Fri Nov 19 14:33:30 2004, incomplete, priority veryhigh)

- Load vtk unstructured mesh
  (added Fri Nov 19 14:03:01 2004, incomplete, priority high)

- View vtk structured and unstructured meshes
  (added Fri Nov 19 14:03:16 2004, incomplete, priority high)

- View a contour plot similar to contour() of Matlab
  (added Fri Nov 19 14:05:04 2004, incomplete, priority high)

- convert numarrays to vtk structuredData objects
  (added Fri Nov 19 14:30:43 2004, incomplete, priority high)

- use a numarray to generate an x-y line plot
  (added Fri Nov 19 14:31:24 2004, incomplete, priority high)

- Get shaded contour plots working
  (added Wed Nov 24 13:34:30 2004, incomplete, priority high)

- Get installation process working so that when pyvisi actually has features
  users can install it easily
  (added Mon Jan 10 13:18:37 2005, incomplete, priority high)

- Migrate all vtk specific code into renders.vtk
  (added Mon Jan 10 13:20:06 2005, incomplete, priority high)

- As part of removing the vtk specific code out of the main part of pyvisi,
  replace the code that is there with objects to be overridden by the specific
  renderer
  (added Mon Jan 10 13:21:52 2005, incomplete, priority high)

- Write up student project description
  (added Fri Nov 19 14:03:51 2004, incomplete, priority medium)

- Convert escript Data objects into relevant vtk objects
  (added Fri Nov 19 14:04:15 2004, incomplete, priority medium)

- Implement add()-ing objects to a scene without them being rendered or added
  directly at instantiation
  (added Fri Nov 19 14:29:19 2004, incomplete, priority medium)

- scene.add() could do a _renderer.AddActor(obj) and rest of code just sets up
  the actor
  (added Fri Nov 19 14:30:16 2004, incomplete, priority medium)

- use a numarray to generate a mesh plot
  (added Fri Nov 19 14:31:02 2004, incomplete, priority medium)

- use a numarray to generate a surf plot
  (added Fri Nov 19 14:31:13 2004, incomplete, priority medium)

- work out how to cope with axes in 2D and 3D
  (added Fri Nov 19 14:32:07 2004, incomplete, priority medium)

- Start writing docs for the api so that other developers can contribute more
  easily
  (added Mon Jan 10 13:19:08 2005, incomplete, priority medium)

- Start to define the objects and methods that all renderers should override or
  at least give an error message or warning that that renderer doesn't support
  that method/object
  (added Mon Jan 10 13:22:38 2005, incomplete, priority medium)

- View a 2D vector field as an Arrow Plot
  (added Fri Nov 19 14:04:33 2004, incomplete, priority low)

- View a 3D vector field as an Arrow Plot
  (added Fri Nov 19 14:04:43 2004, incomplete, priority low)

- View a 3D surface plot similar to surf() of Matlab
  (added Fri Nov 19 14:04:52 2004, incomplete, priority low)

- work out conceptual differences between a mesh plot (in matlab sense) and a
  mesh in a mesh generator sense
  (added Fri Nov 19 14:32:39 2004, incomplete, priority low)

- work out concept of line data for fault systems; is it a LinePlot or what is
  it?
  (added Fri Nov 19 14:33:03 2004, incomplete, priority low)

- Try and get a simple gnuplot plot working using renderers.gnuplot
  (added Mon Jan 10 13:20:57 2005, incomplete, priority verylow)

