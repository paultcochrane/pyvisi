<todo version="0.1.19">
    <note priority="veryhigh" time="1100836955" done="1131605908">
        Reimplement evaluation stack way of running low level code to more robust model
        <comment>
            not really an issue anymore
        </comment>
    </note>
    <note priority="veryhigh" time="1100838523" done="1130983304">
        Work out how to find out the dimensions of an image in vtk
        <comment>
            not needed atm
        </comment>
    </note>
    <note priority="veryhigh" time="1100838588" done="1131511973">
        Implement render object talking directly to a python interpreter instance sitting in a separate thread
        <comment>
            Not needed anymore.
        </comment>
    </note>
    <note priority="veryhigh" time="1100838810" done="1131511963">
        Investigate threading in python and how communication works between processes
        <comment>
            unnecessary
        </comment>
    </note>
    <note priority="veryhigh" time="1109738499" done="1110169282">
        Get saving to file without rendering to screen working in vtk
        <comment>
            done
        </comment>
    </note>
    <note priority="high" time="1100836981" done="1118200768">
        Load vtk unstructured mesh
        <comment>
            done
        </comment>
    </note>
    <note priority="high" time="1100836996" done="1109216820">
        View vtk structured and unstructured meshes
        <comment>
            working in gnuplot
        </comment>
    </note>
    <note priority="high" time="1100837104" done="1109217293">
        View a contour plot similar to contour() of Matlab
        <comment>
            done in gnuplot
        </comment>
    </note>
    <note priority="high" time="1100838643" done="1130905204">
        convert numarrays to vtk structuredData objects
        <comment>
            Not necessary
        </comment>
    </note>
    <note priority="high" time="1100838684" done="1106546226">
        use a numarray to generate an x-y line plot
        <comment>
            completed, but with a Numeric python object.  Should work at present with either.
        </comment>
    </note>
    <note priority="high" time="1101267270" done="1109217321">
        Get shaded contour plots working
        <comment>
            working in gnuplot
        </comment>
    </note>
    <note priority="high" time="1105327117" done="1109216812">
        Get installation process working so that when pyvisi actually has features users can install it easily
        <comment>
            doen
        </comment>
    </note>
    <note priority="high" time="1105327206" done="1105420867">
        Migrate all vtk specific code into renders.vtk
        <comment>
            completed
        </comment>
    </note>
    <note priority="high" time="1105327312" done="1105489800">
        As part of removing the vtk specific code out of the main part of pyvisi, replace the code that is there with objects to be overridden by the specific renderer
        <comment>
            added warnings if base method is called and not overridden
        </comment>
    </note>
    <note priority="high" time="1105408122" done="1106546314">
        Make a devel branch of pyvisi (once is ready to do a pre-pre-pre alpha release)
        <comment>
            mostly done
        </comment>
    </note>
    <note priority="high" time="1105417001" done="1105429114">
        Add a Development link to the web site and start putting stuff like renderers used, how to add a new renderer, what to inherit, structure renderer module should have and other coding guidelines
        <comment>
            started, will be expanded over time
        </comment>
    </note>
    <note priority="high" time="1106279073" done="1130983501">
        Fully implement linestyles in renderers.gnuplot
        <comment>
            basically done
        </comment>
    </note>
    <note priority="high" time="1106279230" done="1106556620">
        Add proper write() methods so that can actually output scenes to file
        <comment>
            done, implemented as save() at present
        </comment>
    </note>
    <note priority="high" time="1106541628" done="1106558945">
        Add a single curve, single data example, and implement.  Single data meaning that the x data is just the indices of the y data given.
        <comment>
            completed
        </comment>
    </note>
    <note priority="high" time="1109738522" done="1110243101">
        Release pyvisi-0.1-pre-alpha2
        <comment>
            done
        </comment>
    </note>
    <note priority="high" time="1131605981" done="1135301802">
        Split up plot.py into files for separate classes; it's getting too big to handle atm
        <comment>
            done
        </comment>
    </note>
    <note priority="medium" time="1100837021" done="1101432846">
        Move project to sourceforge
        <comment>
            done
        </comment>
    </note>
    <note priority="medium" time="1100837031" done="1130905267">
        Write up student project description
        <comment>
            No longer necessary
        </comment>
    </note>
    <note priority="medium" time="1100837055" done="1130905404">
        Convert escript Data objects into relevant vtk objects
        <comment>
            Implemented in many vtk plot classes.
        </comment>
    </note>
    <note priority="medium" time="1100838559" done="1107134466">
        Implement add()-ing objects to a scene without them being rendered or added directly at instantiation
        <comment>
            not much point - more intuitive at the user level to just instantiate the object
        </comment>
    </note>
    <note priority="medium" time="1100838616" done="1113893301">
        scene.add() could do a _renderer.AddActor(obj) and rest of code just sets up the actor
        <comment>
            not implemented that way any more
        </comment>
    </note>
    <note priority="medium" time="1100838662" done="1110244109">
        use a numarray to generate a mesh plot
        <comment>
            done in gnuplot
        </comment>
    </note>
    <note priority="medium" time="1100838673" done="1109216852">
        use a numarray to generate a surf plot
        <comment>
            working in gnuplot
        </comment>
    </note>
    <note priority="medium" time="1100838727" done="1105512047">
        work out how to cope with axes in 2D and 3D
        <comment>
            started
        </comment>
    </note>
    <note priority="medium" time="1105327148" done="1109216956">
        Start writing docs for the api so that other developers can contribute more easily
        <comment>
            in progress
        </comment>
    </note>
    <note priority="medium" time="1105327358" done="1105490746">
        Start to define the objects and methods that all renderers should override or at least give an error message or warning that that renderer doesn't support that method/object
        <comment>
            implemented
        </comment>
    </note>
    <note priority="medium" time="1105419036" done="1109216869">
        Might need some kind of renderer module templating system for developers to work from.
        <comment>
            done; see skel_module.py in admin directory
        </comment>
    </note>
    <note priority="medium" time="1105484015" done="1105512033">
        Start writing a manual, and add objects that are already supported.
        <comment>
            started
        </comment>
    </note>
    <note priority="medium" time="1106095555" done="1106546277">
        Add linestyles ability to LinePlots with words from gnuplot, and with symbols from matlab
        <comment>
            done
        </comment>
    </note>
    <note priority="medium" time="1106277640" done="1109217339">
        Move new method and class definitions from developing renderer modules into the base classes as they get added.  This is so that the interface that new renderer module writers should be writing to override, or at least meet, is in place.
        <comment>
            done
        </comment>
    </note>
    <note priority="medium" time="1106798121" done="1130905423">
        Need to add a delete object method so can remove objects from a Scene if desired
        <comment>
            Stub method added.  Not actually implemented yet at the renderer module level.
        </comment>
    </note>
    <note priority="medium" time="1109217192" done="1130905233">
        Start writing docs for the api so that other developers can contribute more easily
        <comment>
            Basically started.
        </comment>
    </note>
    <note priority="medium" time="1110242939" done="1111472831">
        Add offsets settings for LinePlots so Dion can do seismic stuff
        <comment>
            done in vtk and gnuplot
        </comment>
    </note>
    <note priority="medium" time="1131512085" done="1131605923">
        Need renderer modules to complain if they can't handle a particular kind of object.
        <comment>
            They already do this
        </comment>
    </note>
    <note priority="medium" time="1131512189" done="1131605941">
        Implement surface plots in vtk
        <comment>
            done
        </comment>
    </note>
    <note priority="low" time="1100837073" done="1110169311">
        View a 2D vector field as an Arrow Plot
        <comment>
            done in gnuplot
        </comment>
    </note>
    <note priority="low" time="1100837083" done="1109216921">
        View a 3D vector field as an Arrow Plot
        <comment>
            working in gnuplot
        </comment>
    </note>
    <note priority="low" time="1100837092" done="1109217374">
        View a 3D surface plot similar to surf() of Matlab
        <comment>
            done in gnuplot
        </comment>
    </note>
    <note priority="low" time="1100838759" done="1130905291">
        work out conceptual differences between a mesh plot (in matlab sense) and a mesh in a mesh generator sense
        <comment>
            Am using MeshPlot as in matlab sense
        </comment>
    </note>
    <note priority="low" time="1106279120" done="1113893187">
        Get BallPlots working in vtk
        <comment>
            basic implementation done
        </comment>
    </note>
    <note priority="low" time="1106279129" done="1118200822">
        Get BallPlots working in povray
        <comment>
            basic implementation going
        </comment>
    </note>
    <note priority="low" time="1106279169" done="1106616574">
        Once BallPlots are working in vtk, add renderers.povray and flesh out with base objects and files etc.
        <comment>
            povray structure already present.
        </comment>
    </note>
    <note priority="low" time="1109217244" done="1130905255">
        View a 3D vector field as an Arrow Plot
        <comment>
            Done.
        </comment>
    </note>
    <note priority="verylow" time="1105327257" done="1106092454">
        Try and get a simple gnuplot plot working using renderers.gnuplot
        <comment>
            done
        </comment>
    </note>
    <note priority="veryhigh" time="1131512159">
        Add escript Data object support to all objects
    </note>
    <note priority="high" time="1106279085">
        Fully implement linestyles in renderers.vtk
    </note>
    <note priority="high" time="1109217123">
        View vtk structured and unstructured meshes
    </note>
    <note priority="high" time="1130983490">
        Handle multiple data sets and data types in one vtk file
    </note>
    <note priority="high" time="1131512059">
        Remove running the initString more than once in a given script
    </note>
    <note priority="medium" time="1106280566">
        Need a log output file for user- and developer- debugging information.
    </note>
    <note priority="medium" time="1106546179">
        At present, can only have one kind of linestyle per graph.  We need a way to specify different linestyles for each individual line on a multi-line graph if desired.
    </note>
    <note priority="medium" time="1106797763">
        Need to keep a count of the number of a given type of object exists within a scene so that can have many of the same type of object in a scene (stops overwriting objects in autogenerated code).
    </note>
    <note priority="medium" time="1109216791">
        Add options dictionaries to objects, so that things like xlabel, ylabel etc can be set at object instantiation time.
    </note>
    <note priority="medium" time="1131512107">
        implement surfaceAndContour plots in vtk
    </note>
    <note priority="medium" time="1131512134">
        Implement scatter plots (2D and 3D) in vtk
    </note>
    <note priority="medium" time="1131607327">
        Refactor the code in plot.py - it really needs it!
    </note>
    <note priority="medium" time="1131607395">
        Make custom classes/methods/whatever for common error messages
    </note>
    <note priority="medium" time="1133325314" done="1158172648">
        Implement ArrowPlot3D objects in gnuplot
        <comment>
            not possible in gnuplot 4.0
        </comment>
    </note>
    <note priority="medium" time="1136419190">
        In the Scene.save() method determine the format by the image filename extension, and if not possible use some intelligent default
    </note>
    <note priority="medium" time="1136432511">
        Need to separate out various tasks in setData() into their own methods.  Such as setEscriptData() and setDataFromFile() etc.
    </note>
    <note priority="low" time="1100838783">
        work out concept of line data for fault systems; is it a LinePlot or what is it?
    </note>
    <note priority="low" time="1131512095">
        Implement mesh plots in vtk
    </note>
    <note priority="low" time="1131608103">
        Some of the code in LinePlot.setData() should be in LinePlot.render()
    </note>
    <note priority="verylow" time="1105484058">
        Will need sections in the manual for the docs about each renderer module, or possibly each module supplies their own.
    </note>
</todo>
