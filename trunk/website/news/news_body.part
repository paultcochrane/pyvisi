<!-- $Id$ -->
  <h1>News</h1>
  
  <hr class="top" />

  <div class="item">
      <div class="itemTitle">Multiple curves on 2D plots are now possible</div>
      <div class="itemDate">24-Jan-2005</div>
      <div class="itemAuthor">Paul Cochrane</div>

      <div class="itemText">
	  <p>
	  Pyvisi now supports plotting multiple datasets when graphing 2D
	  curves.  To plot more than one curve on a given
	  <code>LinePlot</code>, one uses the syntax: <code>plot.setData(x,
	      y1, y2, y3, ...)</code>.  The first element in the argument
	  list is assumed to the x data to plot the subsequent arrays
	  against, except in the case that there is only one array in the
	  argument list, in which case the x data is autogenerated as the
	  indices (starting from 1 (maybe this should be zero??)) of the
	  argument data array.
	  </p>
	  <p>
	  To have a look at multiple curves in action, have a look at
	  <code>multiCurvePlotExample.py</code> in the
	  <code>examples/</code> directory of the pyvisi distribution.
	  </p>
      </div>
  </div>

  <div class="item">
      <div class="itemTitle">Simple 2D contour plotting not far away</div>
      <div class="itemDate">24-Jan-2005</div>
      <div class="itemAuthor">Paul Cochrane</div>

      <div class="itemText">
	  <p>
	  Implementing simple contour plotting with just the <a
	      href="http://www.gnuplot.info">gnuplot</a> renderer module has
	  shown a couple of major holes that need plugging.  The main
	  problem at present is that gnuplot requires a call to the
	  <code>splot</code> command to plot contours and surfaces, but a
	  call to the <code>plot</code> command to plot simple 2D graphs.
	  Unfortunately, the call to plot the relevant graph is handled by
	  the <code>render()</code> method within the <code>Scene</code>
	  object, and consequently is just the <code>plot</code> command,
	  which means that this is the wrong place for the object-specific
	  rendering commands, and that the <code>Scene.render()</code>
	  method should call the <code>render()</code> methods of the
	  objects within the scene to do all of the rendering hard work.
	  This may take a while to implement, but things will be more
	  flexible in the future as a result.
	  </p>
	  <p>
	  One of the other major problems that will need to be seen to is
	  the sharing of data objects with the module actually doing the
	  rendering and the pyvisi code actually being run by the user.
	  There are many elements to work on here.  Essentially, we need to
	  put the <code>Renderer</code> object into a separate <a
	      href="http://www.python.org">python</a> process or thread, and
	  then open a pipe to the process and pass commands and objects
	  through to it.  This will sort of solve two problems
	  simultaneously as we need a separate thread/process for the
	  <code>Renderer</code> object anyway, and this may be the best way
	  to share data objects around.  At present, I have implemented a
	  really dodgy way of passing the data around which isn't scalable,
	  but it managed to get the simple 2D plotting to go.  Again, this
	  may take a while...
	  </p>
      </div>
  </div>

  <div class="item">
      <div class="itemTitle">Simple 2D plotting works!</div>
      <div class="itemDate">18-Jan-2005</div>
      <div class="itemAuthor">Paul Cochrane</div>

      <div class="itemText">
          <p>
	  Simple 2D plotting works in both <a 
	      href="http://www.vtk.org/">vtk</a>
	  *and* <a href="http://www.gnuplot.info/">gnuplot</a>!!  This 
	  certainly felt like a major achievement, as it wasn't easy to get 
	  vtk to do 2D x-y plots.  To get a feeling for what I've done check 
	  out <code>plotExample.py</code> in the <code>examples</code> 
	  directory of the <a href="http://pyvisi.sourceforge.net">pyvisi</a> 
	  distribution.
          </p>
          <p>
	  Please note that this is <strong>very</strong> basic.  At present 
	  one can only plot one set of data, and the way the data is 
	  transferred to the renderer module in the backend is very 
	  simplistic and not amenable to scaling to large datasets.  
	  Nevertheless, this example shows how pyvisi can be used in the 
	  future.  It is also only possible to pass to the plotting routines 
	  two 1D arrays of data, one for the x-axis and one for the y-axis.  
	  Also, there isn't any implementation yet for changing colour on 
	  the axes, or the plot lines, however there is limited functionality 
	  available for choosing different kinds of linestyles.  I'm also 
	  not completely happy with the syntax at the user-level of the 
	  interface, and this has to change.  Specifically, the 
	  <code>.add()</code> method of the scene object to add an object 
	  to the scene.  Surely this should be sorted out when one 
	  instantiates the object and passes the scene object as an 
	  argument.  The other method that needs to disappear from user-space 
	  is the <code>.render()</code> method of the individual objects.  
	  Users should only have to render the scene.  The problem here is 
	  to finish off some stuff that vtk needs before doing the final 
	  render (such as the <code>AddActor()</code> methods); this can be 
	  done a better way.  One problem with the way I'm doing it at 
	  present is that re-rendering *doesn't* need the pre-render step.  
	  But re-rendering is a different kettle of fish, and there are 
	  many other things to work on before we get to there.
          </p>
          <p>
	  Note that to use the vtk renderer module, you must have vtk 
	  installed, and have configured vtk for python (so that the python 
	  vtk wrappers are available).  To use the gnuplot renderer module,
	  you must have gnuplot (version greater than or equal to 3.7) 
	  installed, and <a 
	      href="http://gnuplot-py.sourceforge.net/">Gnuplot.py</a> (the
          gnuplot python wrapper).
          </p>
          <p>
	  Even with all of these caveats, have a look at the example code, 
	  and tell me if you like the syntax (or not), if you have any 
	  comments or suggestions as to what I could do extra or what I 
	  could do differently, or even if you were able to get the 
	  <code>plotExample.py</code> example to go!
          </p>
      </div>
  </div>
