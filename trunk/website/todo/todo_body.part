<!-- $Id$ -->
  <h1>Todo list</h1>
  
  <hr class="top" />

<!-- Automagically generated by the ToDo program on 19/01/05, 10:45 -->
<todo version="0.1.18">
    <note priority="high" time="1105327206" done="1105420867">
        Migrate all vtk specific code into renders.vtk
        <comment>
            completed
        </comment>
    </note>
    <note priority="high" time="1105327312" done="1105489800">
        As part of removing the vtk specific code out of the main part of pyvisi, replace the code that is there with objects to be overridden by the specific renderer
        <comment>
            added warnings if base method is called and not overridden
        </comment>
    </note>
    <note priority="high" time="1105417001" done="1105429114">
        Add a Development link to the web site and start putting stuff like renderers used, how to add a new renderer, what to inherit, structure renderer module should have and other coding guidelines
        <comment>
            started, will be expanded over time
        </comment>
    </note>
    <note priority="medium" time="1100837021" done="1101432846">
        Move project to sourceforge
        <comment>
            done
        </comment>
    </note>
    <note priority="medium" time="1100838727" done="1105512047">
        work out how to cope with axes in 2D and 3D
        <comment>
            started
        </comment>
    </note>
    <note priority="medium" time="1105327358" done="1105490746">
        Start to define the objects and methods that all renderers should override or at least give an error message or warning that that renderer doesn't support that method/object
        <comment>
            implemented
        </comment>
    </note>
    <note priority="medium" time="1105484015" done="1105512033">
        Start writing a manual, and add objects that are already supported.
        <comment>
            started
        </comment>
    </note>
    <note priority="verylow" time="1105327257" done="1106092454">
        Try and get a simple gnuplot plot working using renderers.gnuplot
        <comment>
            done
        </comment>
    </note>
    <note priority="veryhigh" time="1100836955">
        Reimplement evaluation stack way of running low level code to more robust model
    </note>
    <note priority="veryhigh" time="1100838523">
        Work out how to find out the dimensions of an image in vtk
    </note>
    <note priority="veryhigh" time="1100838588">
        Implement render object talking directly to a python interpreter instance sitting in a separate thread
    </note>
    <note priority="veryhigh" time="1100838810">
        Investigate threading in python and how communication works between processes
    </note>
    <note priority="high" time="1100836981">
        Load vtk unstructured mesh
    </note>
    <note priority="high" time="1100836996">
        View vtk structured and unstructured meshes
    </note>
    <note priority="high" time="1100837104">
        View a contour plot similar to contour() of Matlab
    </note>
    <note priority="high" time="1100838643">
        convert numarrays to vtk structuredData objects
    </note>
    <note priority="high" time="1100838684">
        use a numarray to generate an x-y line plot
    </note>
    <note priority="high" time="1101267270">
        Get shaded contour plots working
    </note>
    <note priority="high" time="1105327117">
        Get installation process working so that when pyvisi actually has features users can install it easily
    </note>
    <note priority="high" time="1105408122">
        Make a devel branch of pyvisi (once is ready to do a pre-pre-pre alpha release)
    </note>
    <note priority="medium" time="1100837031">
        Write up student project description
    </note>
    <note priority="medium" time="1100837055">
        Convert escript Data objects into relevant vtk objects
    </note>
    <note priority="medium" time="1100838559">
        Implement add()-ing objects to a scene without them being rendered or added directly at instantiation
    </note>
    <note priority="medium" time="1100838616">
        scene.add() could do a _renderer.AddActor(obj) and rest of code just sets up the actor
    </note>
    <note priority="medium" time="1100838662">
        use a numarray to generate a mesh plot
    </note>
    <note priority="medium" time="1100838673">
        use a numarray to generate a surf plot
    </note>
    <note priority="medium" time="1105327148">
        Start writing docs for the api so that other developers can contribute more easily
    </note>
    <note priority="medium" time="1105419036">
        Might need some kind of renderer module templating system for developers to work from.
    </note>
    <note priority="medium" time="1106095555">
        Add linestyles ability to LinePlots with words from gnuplot, and with symbols from matlab
    </note>
    <note priority="low" time="1100837073">
        View a 2D vector field as an Arrow Plot
    </note>
    <note priority="low" time="1100837083">
        View a 3D vector field as an Arrow Plot
    </note>
    <note priority="low" time="1100837092">
        View a 3D surface plot similar to surf() of Matlab
    </note>
    <note priority="low" time="1100838759">
        work out conceptual differences between a mesh plot (in matlab sense) and a mesh in a mesh generator sense
    </note>
    <note priority="low" time="1100838783">
        work out concept of line data for fault systems; is it a LinePlot or what is it?
    </note>
    <note priority="verylow" time="1105484058">
        Will need sections in the manual for the docs about each renderer module, or possibly each module supplies their own.
    </note>
</todo>
  
